[CC_Config]
host_count = 3
seed = 7
freq_lower_bound = 3.0
freq_upper_bound = 3.0
freq_start = 2.5
arrival_rate = 8 ;Not used
service_rate = 10 ;Not used
sleep_alpha = 1.2 ;Not used
timesteps = 20000000
computation_comm_ratio = 1.0
mpip_report_type = Energy
req_size = 1000
d_0 = 10000000
P_s = 50
alpha = 250
num_of_servers = 20
e = 0.1
s_b = 1.2 * 10**9
s_c = 3 * 10**9
pow_con_model = 2
		
[Abstract]
;param arrival_distribution: function to generate arrival wait times from
;param arrival_kwargs: keyword arguments to feed into the arrival distribution
;param comm_distribution: function to generate service wait times from
;param comm_kwargs: keyword arguments to feed into the arrival distribution
;param comp_time: Fixed time to spend computing
;param send_to: list of hosts to randomly send packets done servicing to
;param should_generate: should the host generate its own packets

		
problem_type = 2 ;Broadcast
;problem_type = 3 ;Gather
dimension_depth = 2
dimension_children = 2

;control_scheme = None
;control_scheme = basic
control_scheme = back_propagate ;Gather only for now

wake_up_distribution = exponential
wake_up_kwargs = {'scale': 4000000}
arrival_distribution = poisson
arrival_kwargs = {'lam': 25}
arrival_rate = [1 * 10**7, 2 * 10**7, 3 * 10**7, 4 * 10**7]
;arrival_distribution = exponential
;arrival_kwargs = {'scale': 0.01}
;arrival_distribution = fixed
;arrival_kwargs = {'a': [0.1]}
;arrival_distribution = pareto
;arrival_kwargs = {'b': 3, 'loc': 0, 'scale': 5}
;arrival_distribution = lognormal
;arrival_kwargs = {'mean': 5, 'sigma': 1}

;comm_distribution = exponential
;comm_kwargs = {'scale': 5}
;comm_distribution = fixed
;comm_kwargs = {'a': [5]}
comm_distribution = pareto
comm_kwargs = {'b': 3, 'loc': 0, 'scale': 5}
;comm_distribution = lognormal
;comm_kwargs = {'mean': 0.7, 'sigma': 1}